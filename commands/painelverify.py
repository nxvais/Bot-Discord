#Modulos Necess√°rios
#from captcha.image import ImageCaptcha
#import discord
#from discord.ui import *

# Comando principal do bot que cria um painel de verifica√ß√£o interativo
@bot.tree.command(description='Cria um painel interativo para os usu√°rios se Verificarem no servidor.')  
async def painelverify(interaction: discord.Interaction):
    # Verifica se o usu√°rio que executou o comando tem permiss√£o de administrador
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message('Voc√™ n√£o tem a permiss√£o de **ADMINISTRADOR** para utilizar esse Bot√£o.', ephemeral=True)
        return  # Se n√£o tiver permiss√£o, retorna e n√£o executa mais nada
    
    # Cria√ß√£o do embed para o painel de verifica√ß√£o
    embedVerify = discord.Embed(title='Painel de Verifica√ß√£o', description='Clique no bot√£o abaixo para iniciar a verifica√ß√£o.', color=discord.Color.dark_blue())
    
    # Cria√ß√£o do bot√£o que vai iniciar a verifica√ß√£o
    Bot√£oVerify = Button(label='Verifique-se', style=discord.ButtonStyle.secondary, emoji='üîë')
    
    # Cria√ß√£o de uma view (uma cole√ß√£o de componentes interativos) para o primeiro bot√£o
    PrimeiraView = View(timeout=None)
    PrimeiraView.add_item(Bot√£oVerify)
    
    # Envia o painel de verifica√ß√£o (com o embed e o bot√£o) para o canal onde o comando foi executado
    await interaction.response.send_message(embed=embedVerify, view=PrimeiraView)
    
    # Fun√ß√£o de callback que √© chamada quando o bot√£o de verifica√ß√£o √© pressionado
    async def verify_callback(interaction):
        # Gera√ß√£o do captcha usando a biblioteca ImageCaptcha
        imagem = ImageCaptcha(width=280, height=90)  
        captcha_text = ''.join(choices(string.ascii_letters + string.digits, k=6))  # Gera um c√≥digo de 6 caracteres aleat√≥rios

        # Gera a imagem do captcha com o texto aleat√≥rio gerado
        data = imagem.generate(captcha_text)
        
        # Cria√ß√£o do bot√£o para o usu√°rio clicar e responder ao captcha
        Bot√£oInputCaptcha = Button(label='Responder Captcha', style=discord.ButtonStyle.secondary, emoji='üîë')
        
        # Cria√ß√£o de uma nova view para o bot√£o de resposta do captcha
        SegundaView = View(timeout=None)
        SegundaView.add_item(Bot√£oInputCaptcha)
     
        # Envia o captcha como imagem junto com o bot√£o de resposta
        await interaction.response.send_message(file=discord.File(data, 'captcha.png'), view=SegundaView, ephemeral=True)  
        
        # Fun√ß√£o de callback para quando o usu√°rio clicar no bot√£o de resposta do captcha
        async def input_captcha_callback(interaction):
            # Cria√ß√£o de um modal (janela interativa) para o usu√°rio digitar o captcha
            ModalCaptcha = Modal(title='Digite o Captcha')
            InputCaptcha = TextInput(label='Digite o Captcha (6 D√≠gitos)', placeholder='Digite o Captcha', style=discord.TextInputStyle.short, max_length=6, min_length=6, required=True)
            
            # Adiciona o campo de entrada de texto ao modal
            ModalCaptcha.add_item(InputCaptcha)
            
            # Fun√ß√£o que ser√° chamada quando o usu√°rio enviar o modal
            async def on_submit_captcha(interaction):
                # ID do cargo que ser√° atribu√≠do ao usu√°rio se o captcha for correto
                CargoID = 1300592091415449621 
                
                # Verifica se o texto digitado pelo usu√°rio corresponde ao texto gerado do captcha
                if InputCaptcha.value.lower() == captcha_text.lower():
                    # Se o captcha estiver correto, envia uma mensagem de sucesso
                    EmbedSucesso = discord.Embed(title='Captcha Correto', color=discord.Colour.from_rgb(0, 255, 0))
                    EmbedSucesso.add_field(name='Captcha Correto', value='Voc√™ foi verificado com sucesso\nVoc√™ ter√° acesso aos outros canais em Breve...', inline=False)
                    
                    # Obt√©m o cargo com o ID definido e atribui ao usu√°rio
                    cargo = interaction.guild.get_role(CargoID)
                    await interaction.response.send_message(embed=EmbedSucesso, ephemeral=True)
                    
                    # Atribui o cargo ao usu√°rio
                    await interaction.user.add_roles(cargo)
                    
                else:
                    # Se o captcha estiver errado, envia uma mensagem de erro
                    EmbedErro = discord.Embed(title='Erro', color=discord.Colour.from_rgb(255, 0, 0))
                    EmbedErro.add_field(name='Captcha Errado', value='Tente Novamente...', inline=False)
                    
                    # Envia a mensagem de erro
                    await interaction.response.send_message(embed=EmbedErro, ephemeral=True)
            
            # Atribui a fun√ß√£o de envio para o modal
            ModalCaptcha.on_submit = on_submit_captcha
            # Exibe o modal para o usu√°rio preencher
            await interaction.response.send_modal(ModalCaptcha)
        
        # Associa o callback ao bot√£o de resposta do captcha
        Bot√£oInputCaptcha.callback = input_captcha_callback

    # Associa a fun√ß√£o de callback ao primeiro bot√£o de verifica√ß√£o
    Bot√£oVerify.callback = verify_callback
